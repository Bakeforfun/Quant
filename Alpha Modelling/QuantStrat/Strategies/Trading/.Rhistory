install.packages("shiny")
install.packages("quantmod")
install.packages("PerformanceAnalytics")
require(quantmod)
require(PerformanceAnalytics)
getSymbols(c("SPY", "TLT"), from="1990-01-01")
plot(SPY)
plot(TLT)
returns <- merge(Return.calculate(Ad(SPY)), Return.calculate(Ad(TLT)), join='inner')
returns
head(returns)
returns <- returns[-1,]
head(returns)
configs <- list()
for(i in 1:21) {
weightSPY <- (i-1)*.05
weightTLT <- 1-weightSPY
config <- Return.portfolio(R = returns, weights=c(weightSPY, weightTLT), rebalance_on = "months")
configs[[i]] <- config
}
weightSPY
weightTLT
config
str(configs)
configs <- do.call(cbind, configs)
configs
head(configs)
cumRets <- cumprod(1+configs)
cumRets
head(cumRets)
period <- 72
roll72CumAnn <- (cumRets/lag(cumRets, period))^(252/period) - 1
roll72SD <- sapply(X = configs, runSD, n=period)*sqrt(252)
roll72CumAnn
sd_f_factor <- 2.5
modSharpe <- roll72CumAnn/roll72SD^sd_f_factor
monthlyModSharpe <- modSharpe[endpoints(modSharpe, on="months"),]
findMax <- function(data) {
return(data==max(data))
}
weights <- t(apply(monthlyModSharpe, 1, findMax))
weights <- weights*1
weights <- xts(weights, order.by=as.Date(rownames(weights)))
weights[is.na(weights)] <- 0
weights$zeroes <- 1-rowSums(weights)
configs$zeroes <- 0
stratRets <- Return.portfolio(R = configs, weights = weights)
rbind(table.AnnualizedReturns(stratRets), maxDrawdown(stratRets))
charts.PerformanceSummary(stratRets)
rbind(table.AnnualizedReturns(stratRets), maxDrawdown(stratRets))
stratAndComponents <- merge(returns, stratRets, join='inner')
charts.PerformanceSummary(stratAndComponents)
rbind(table.AnnualizedReturns(stratAndComponents), maxDrawdown(stratAndComponents))
apply.yearly(stratAndComponents, Return.cumulative)
rbind(table.AnnualizedReturns(stratAndComponents), maxDrawdown(stratAndComponents))
apply.yearly(stratAndComponents, Return.cumulative)
weightSPY <- apply(monthlyModSharpe, 1, which.max)
weightSPY <- do.call(rbind, weightSPY)
weightSPY <- (weightSPY-1)*.05
align <- cbind(weightSPY, stratRets)
align <- na.locf(align)
chart.TimeSeries(align[,1], date.format="%Y", ylab="Weight SPY", main="Weight of SPY in SPY-TLT pair")
endpoints
?endpoints
require(quantmod)
require(PerformanceAnalytics)
getSymbols(c("SPY", "TLT"), from="1990-01-01")
returns <- merge(Return.calculate(Ad(SPY)), Return.calculate(Ad(TLT)), join='inner')
returns <- returns[-1,]
configs <- list()
for(i in 1:21) {
weightSPY <- (i-1)*.05
weightTLT <- 1-weightSPY
config <- Return.portfolio(R = returns, weights=c(weightSPY, weightTLT), rebalance_on = "months")
configs[[i]] <- config
}
configs <- do.call(cbind, configs)
cumRets <- cumprod(1+configs)
period <- 72
roll72CumAnn <- (cumRets/lag(cumRets, period))^(252/period) - 1
roll72SD <- sapply(X = configs, runSD, n=period)*sqrt(252)
getSymbols(c("SPY", "TLT"), from="1990-01-01")
returns <- merge(Return.calculate(Ad(SPY)), Return.calculate(Ad(TLT)), join='inner')
returns <- returns[-1,]
configs <- list()
for(i in 1:21) {
weightSPY <- (i-1)*.05
weightTLT <- 1-weightSPY
config <- Return.portfolio(R = returns, weights=c(weightSPY, weightTLT), rebalance_on = "months")
configs[[i]] <- config
}
configs <- do.call(cbind, configs)
cumRets <- cumprod(1+configs)
period <- 72
roll72CumAnn <- (cumRets/lag(cumRets, period))^(252/period) - 1
roll72SD <- sapply(X = configs, runSD, n=period)*sqrt(252)
sd_f_factor <- 2.5
modSharpe <- roll72CumAnn/roll72SD^sd_f_factor
monthlyModSharpe <- modSharpe[endpoints(modSharpe, on="daily"),]
monthlyModSharpe <- modSharpe[endpoints(modSharpe, on="monthly"),]
require(quantmod)
require(PerformanceAnalytics)
getSymbols(c("SPY", "TLT"), from="1990-01-01")
returns <- merge(Return.calculate(Ad(SPY)), Return.calculate(Ad(TLT)), join='inner')
returns <- returns[-1,]
configs <- list()
for(i in 1:21) {
weightSPY <- (i-1)*.05
weightTLT <- 1-weightSPY
config <- Return.portfolio(R = returns, weights=c(weightSPY, weightTLT), rebalance_on = "months")
configs[[i]] <- config
}
require(quantmod)
require(PerformanceAnalytics)
getSymbols(c("SPY", "TLT"), from="1990-01-01")
returns <- merge(Return.calculate(Ad(SPY)), Return.calculate(Ad(TLT)), join='inner')
returns <- returns[-1,]
configs <- list()
for(i in 1:21) {
weightSPY <- (i-1)*.05
weightTLT <- 1-weightSPY
config <- Return.portfolio(R = returns, weights=c(weightSPY, weightTLT), rebalance_on = "months")
configs[[i]] <- config
}
configs <- do.call(cbind, configs)
cumRets <- cumprod(1+configs)
period <- 72
roll72CumAnn <- (cumRets/lag(cumRets, period))^(252/period) - 1
roll72SD <- sapply(X = configs, runSD, n=period)*sqrt(252)
sd_f_factor <- 2.5
modSharpe <- roll72CumAnn/roll72SD^sd_f_factor
monthlyModSharpe <- modSharpe[endpoints(modSharpe, on="months"),]
require(quantmod)
require(PerformanceAnalytics)
getSymbols(c("SPY", "TLT"), from="1990-01-01")
returns <- merge(Return.calculate(Ad(SPY)), Return.calculate(Ad(TLT)), join='inner')
returns <- returns[-1,]
configs <- list()
for(i in 1:21) {
weightSPY <- (i-1)*.05
weightTLT <- 1-weightSPY
config <- Return.portfolio(R = returns, weights=c(weightSPY, weightTLT), rebalance_on = "months")
configs[[i]] <- config
}
configs <- do.call(cbind, configs)
cumRets <- cumprod(1+configs)
period <- 72
roll72CumAnn <- (cumRets/lag(cumRets, period))^(252/period) - 1
roll72SD <- sapply(X = configs, runSD, n=period)*sqrt(252)
sd_f_factor <- 2.5
modSharpe <- roll72CumAnn/roll72SD^sd_f_factor
monthlyModSharpe <- modSharpe[endpoints(modSharpe, on="days"),]
findMax <- function(data) {
return(data==max(data))
}
require(quantmod)
require(PerformanceAnalytics)
getSymbols(c("SPY", "TLT"), from="1990-01-01")
View(SPY)
View(TLT)
returns <- merge(Return.calculate(Ad(SPY)), Return.calculate(Ad(TLT)), join='inner')
returns <- returns[-1,]
configs <- list()
for(i in 1:21) {
weightSPY <- (i-1)*.05
weightTLT <- 1-weightSPY
config <- Return.portfolio(R = returns, weights=c(weightSPY, weightTLT), rebalance_on = "months")
configs[[i]] <- config
}
configs <- do.call(cbind, configs)
cumRets <- cumprod(1+configs)
period <- 72
roll72CumAnn <- (cumRets/lag(cumRets, period))^(252/period) - 1
roll72SD <- sapply(X = configs, runSD, n=period)*sqrt(252)
sd_f_factor <- 2.5
modSharpe <- roll72CumAnn/roll72SD^sd_f_factor
monthlyModSharpe <- modSharpe[endpoints(modSharpe, on="days"),]
findMax <- function(data) {
return(data==max(data))
}
weights <- t(apply(monthlyModSharpe, 1, findMax))
weights <- weights*1
weights <- xts(weights, order.by=as.Date(rownames(weights)))
weights[is.na(weights)] <- 0
weights$zeroes <- 1-rowSums(weights)
configs$zeroes <- 0
stratRets <- Return.portfolio(R = configs, weights = weights)
rbind(table.AnnualizedReturns(stratRets), maxDrawdown(stratRets))
charts.PerformanceSummary(stratRets)
rbind(table.AnnualizedReturns(stratRets), maxDrawdown(stratRets))
stratAndComponents <- merge(returns, stratRets, join='inner')
charts.PerformanceSummary(stratAndComponents)
rbind(table.AnnualizedReturns(stratAndComponents), maxDrawdown(stratAndComponents))
apply.yearly(stratAndComponents, Return.cumulative)
weightSPY <- apply(monthlyModSharpe, 1, which.max)
weightSPY <- do.call(rbind, weightSPY)
weightSPY <- (weightSPY-1)*.05
align <- cbind(weightSPY, stratRets)
align <- na.locf(align)
chart.TimeSeries(align[,1], date.format="%Y", ylab="Weight SPY", main="Weight of SPY in SPY-TLT pair")
shiny::runApp('RStudio/Quant-master/MA')
shiny::runApp('RStudio/Quant-master/MA')
getOption("encoding")
install.packages("DSTrading")
install.packages("C:\Users\Internet\Documents\Alpha\QuantStrat\DSTrading-master.zip", repos=NULL)
install.packages("~/Alpha/QuantStrat/DSTrading-master.zip", repos = NULL, type = "win.binary")
require(`DSTrading-master`)
require(DSTrading)
install.packages("~/Alpha/QuantStrat/DSTrading.zip", repos = NULL, type = "win.binary")
install.packages("quantstrat")
install.packages("inline")
install.packages("QuantStrat")
install.packages("quantstrat", repos="http://R-Forge.R-project.org")
install.packages("roxygen2")
setwd("~/Alpha modelling/QuantStrat/Categories/Trading")
require(DSTrading)
require(quantstrat)
options(width=80)
source("demoData.R") #contains all of the data-related boilerplate.
##### Strategy implementation #####
strategy.st <- portfolio.st <- account.st <- "TVItrendFollowingLong"
rm.strat(portfolio.st)
rm.strat(strategy.st)
initPortf(portfolio.st, symbols=symbols, initDate=initDate, currency='USD')
initAcct(account.st, portfolios=portfolio.st, initDate=initDate, currency='USD')
initOrders(portfolio.st, initDate=initDate)
strategy(strategy.st, store=TRUE)
# Indicator
add.indicator(strategy.st, name="TVI", arguments=list(x=quote(Cl(mktdata)), period=100, delta=0.2), label="TVI")
get.strategy(strategy.st)
getStrategy(strategy.st)
# Signals
add.signal(strategy.st, name="sigThreshold",
arguments=list(threshold=1, column="vigor.TVI", relationship="gte", cross=TRUE),
label="longEntry")
add.signal(strategy.st, name="sigThreshold",
arguments=list(threshold=1.4, column="vigor.TVI", relationship="lt", cross=TRUE),
label="longExit")
add.signal(strategy.st, name="sigThreshold",
arguments=list(threshold=1, column="vigor.TVI", relationship="lt", cross=TRUE),
label="wrongExit")
getStrategy(strategy.st)
# Rules
add.rule(strategy.st, name="ruleSignal",
arguments=list(sigcol="longEntry", sigval=TRUE, orderqty=100,
ordertype="market", orderside="long", replace=FALSE, prefer="Open"),
type="enter", path.dep=TRUE)
add.rule(strategy.st, name="ruleSignal",
arguments=list(sigcol="longExit", sigval=TRUE, orderqty="all",
ordertype="market", orderside="long", replace=FALSE, prefer="Open"),
type="exit", path.dep=TRUE)
add.rule(strategy.st, name="ruleSignal",
arguments=list(sigcol="wrongExit", sigval=TRUE, orderqty="all",
ordertype="market", orderside="long", replace=FALSE, prefer="Open"),
type="exit", path.dep=TRUE)
t1 <- Sys.time()
out <- applyStrategy(strategy=strategy.st,portfolios=portfolio.st, verbose=FALSE) # verbose=FALSE to suspend the order log
t2 <- Sys.time()
print(t2-t1)
updatePortf(portfolio.st)
dateRange <- time(getPortfolio(portfolio.st)$summary)[-1]
updateAcct(portfolio.st,dateRange)
updateEndEq(account.st)
tStats <- tradeStats(Portfolios = portfolio.st, use = "trades", inclZeroDays = FALSE)
print(data.frame(t(tStats[, -c(1:2)])))
dStats <- dailyStats(Portfolios = portfolio.st, use = "Equity")
rownames(dStats) <- gsub("\\.DailyEndEq", "", rownames(dStats))
print(data.frame(t(dStats[, -1])))
tmp <- TVI(Cl(XLB), period = 100)
# add_TA(tmp$vigor)
chart_Series(tmp$vigor)
portPL <- .blotter$portfolio.TVItrendFollowingLong$summary$Net.Trading.PL
(SharpeRatio.annualized(portPL, geometric=FALSE))
plot(cumsum(portPL)["2003::"])
setwd("~/Alpha Modelling/QuantStrat/Strategies/Trading")
setwd("~/Alpha Modelling/QuantStrat/Strategies/Trading")
require(IKTrading)
require(DSTrading)
require(quantstrat)
osMaxDollar()
osMaxDollar
setwd("~/Alpha Modelling/QuantStrat/Strategies/Trading")
require(DSTrading)
require(IKTrading)
require(quantstrat)
source("demoData.R") #contains all of the data-related boilerplate.
##### Strategy implementation #####
# Trade sizing and initial equity settings
tradeSize <- 10000
initEq <- tradeSize*length(symbols)
strategy.st <- portfolio.st <- account.st <- "TVI_TF_2"
rm.strat(portfolio.st)
rm.strat(strategy.st)
initPortf(portfolio.st, symbols=symbols, initDate=initDate, currency='USD')
initAcct(account.st, portfolios=portfolio.st, initDate=initDate,
currency='USD',initEq=initEq)
initOrders(portfolio.st, initDate=initDate)
strategy(strategy.st, store=TRUE)
# Parameters (trigger lag unchanged, defaulted at 1)
delta=.2
#delta=.05
#delta=0
period=100
# Indicators
add.indicator(strategy.st, name="TVI", arguments=list(x=quote(Cl(mktdata)),
period=period, delta=delta), label="TVI")
# Signals
add.signal(strategy.st, name="sigThreshold",
arguments=list(threshold=1, column="vigor.TVI",
relationship="gte", cross=FALSE),
label="TVIgtThresh")
add.signal(strategy.st, name="sigComparison",
arguments=list(columns=c("vigor.TVI","trigger.TVI"),
relationship="gt"),
label="TVIgtLag")
add.signal(strategy.st, name="sigAND",
arguments=list(columns=c("TVIgtThresh","TVIgtLag"),
cross=TRUE),
label="longEntry")
add.signal(strategy.st, name="sigCrossover",
arguments=list(columns=c("vigor.TVI","trigger.TVI"),
relationship="lt"),
label="longExit")
# Rules
add.rule(strategy.st, name="ruleSignal",
arguments=list(sigcol="longEntry", sigval=TRUE, orderqty=100,
ordertype="market", orderside="long",
replace=FALSE, prefer="Open", osFUN=osMaxDollar,
tradeSize=10000, maxSize=10000),
type="enter", path.dep=TRUE)
add.rule(strategy.st, name="ruleSignal",
arguments=list(sigcol="longExit", sigval=TRUE, orderqty="all",
ordertype="market", orderside="long", replace=FALSE,
prefer="Open"),
type="exit", path.dep=TRUE)
##### Strategy application #####
t1 <- Sys.time()
out <- applyStrategy(strategy=strategy.st,portfolios=portfolio.st)
print(t2-t1)
t2 <- Sys.time()
t2 <- Sys.time()
print(t2-t1)
##### Analytics #####
updatePortf(portfolio.st)
dateRange <- time(getPortfolio(portfolio.st)$summary)[-1]
updateAcct(portfolio.st,dateRange)
updateEndEq(account.st)
# Trade stats
tStats <- tradeStats(Portfolios = portfolio.st, use="trades", inclZeroDays=FALSE)
tStats[,4:ncol(tStats)] <- round(tStats[,4:ncol(tStats)], 2)
print(data.frame(t(tStats[,-c(1,2)])))
summary(tStats$Gross.Profit)
# Daily stats
dStats <- dailyStats(Portfolios = portfolio.st, use="Equity")
rownames(dStats) <- gsub(".DailyEndEq","", rownames(dStats))
print(data.frame(t(dStats)))
# Portfolio cash PL
portPL <- .blotter$portfolio.TVI_TF_2$summary$Net.Trading.PL
# Cash Sharpe
(SharpeRatio.annualized(portPL, geometric=FALSE))
# Graph
instRets <- PortfReturns(account.st)
portfRets <- xts(rowMeans(instRets)*ncol(instRets), order.by=index(instRets))
cumPortfRets <- cumprod(1+portfRets)-1
firstNonZeroDay <- index(portfRets)[min(which(portfRets!=0))]
getSymbols("SPY", from=firstNonZeroDay, to="2010-12-31")
SPYrets <- diff(log(Cl(SPY)))[-1]
cumSPYrets <- cumprod(1+SPYrets)-1
comparison <- cbind(cumPortfRets, cumSPYrets)
colnames(comparison)  <- c("strategy", "SPY")
chart.TimeSeries(comparison, legend.loc = "topleft",
main=paste0("Period=", period, ", Delta=",delta))
# Sharpe based on returns, annualized returns, and max drawdown
SharpeRatio.annualized(portfRets)
Return.annualized(portfRets)
maxDrawdown(portfRets)
chart.Posn(portfolio.st, "XLB")
tmp <- TVI(Cl(XLB), period=period, delta=delta, triggerLag=30)
add_TA(tmp$vigor)
add_TA(tmp$trigger, on=5, col="red")
# Some other stats
mean(tStats$Percent.Positive)
(aggPF <- sum(tStats$Gross.Profits)/-sum(tStats$Gross.Losses))
(aggCorrect <- mean(tStats$Percent.Positive))
(numTrades <- sum(tStats$Num.Trades))
(meanAvgWLR <- mean(tStats$Avg.WinLoss.Ratio))
setwd("~/Documents/Quant/Alpha Modelling/QuantStrat/Strategies/Trading")
require(DSTrading)
require(IKTrading)
require(quantstrat)
initDate="1990-01-01"
from="2003-01-01"
to="2010-12-31"
source("demoData.R") #contains all of the data-related boilerplate.
require(DSTrading)
require(IKTrading)
require(quantstrat)
initDate="1990-01-01"
from="2003-01-01"
to="2010-12-31"
source("demoData.R") #contains all of the data-related boilerplate.
##### Strategy implementation #####
# Trade sizing and initial equity settings
tradeSize <- 10000
initEq <- tradeSize*length(symbols)
strategy.st <- portfolio.st <- account.st <- "TVI_osATR"
rm.strat(portfolio.st)
rm.strat(strategy.st)
initPortf(portfolio.st, symbols=symbols, initDate=initDate, currency='USD')
initAcct(account.st, portfolios=portfolio.st, initDate=initDate, currency='USD',initEq=initEq)
initOrders(portfolio.st, initDate=initDate)
strategy(strategy.st, store=TRUE)
# Parameters (trigger lag unchanged, defaulted at 1)
delta=0
period=20
pctATR=.02 #control risk with this parameter
#pctATR=.04
# Indicators
add.indicator(strategy.st, name="TVI", arguments=list(x=quote(Cl(mktdata)), period=period, delta=delta), label="TVI")
add.indicator(strategy.st, name="lagATR", arguments=list(HLC=quote(HLC(mktdata)), n=period), label="atrX")
# Signals
add.signal(strategy.st, name="sigThreshold",
arguments=list(threshold=1, column="vigor.TVI", relationship="gte", cross=FALSE),
label="TVIgtThresh")
add.signal(strategy.st, name="sigComparison",
arguments=list(columns=c("vigor.TVI","trigger.TVI"), relationship="gt"),
label="TVIgtLag")
add.signal(strategy.st, name="sigAND",
arguments=list(columns=c("TVIgtThresh","TVIgtLag"), cross=TRUE),
label="longEntry")
add.signal(strategy.st, name="sigCrossover",
arguments=list(columns=c("vigor.TVI","trigger.TVI"), relationship="lt"),
label="longExit")
# Rules
add.rule(strategy.st, name="ruleSignal",
arguments=list(sigcol="longEntry", sigval=TRUE, ordertype="market",
orderside="long", replace=FALSE, prefer="Open", osFUN=osDollarATR,
tradeSize=tradeSize, pctATR=pctATR, atrMod="X"),
type="enter", path.dep=TRUE)
add.rule(strategy.st, name="ruleSignal",
arguments=list(sigcol="longExit", sigval=TRUE, orderqty="all", ordertype="market",
orderside="long", replace=FALSE, prefer="Open"),
type="exit", path.dep=TRUE)
##### Strategy application #####
t1 <- Sys.time()
out <- applyStrategy(strategy=strategy.st,portfolios=portfolio.st)
t2 <- Sys.time()
print(t2-t1)
##### Analytics #####
updatePortf(portfolio.st)
dateRange <- time(getPortfolio(portfolio.st)$summary)[-1]
updateAcct(portfolio.st,dateRange)
updateEndEq(account.st)
# Trade stats
tStats <- tradeStats(Portfolios = portfolio.st, use="trades", inclZeroDays=FALSE)
tStats[,4:ncol(tStats)] <- round(tStats[,4:ncol(tStats)], 2)
print(data.frame(t(tStats[,-c(1,2)])))
(aggPF <- sum(tStats$Gross.Profits)/-sum(tStats$Gross.Losses))
(aggCorrect <- mean(tStats$Percent.Positive))
(numTrades <- sum(tStats$Num.Trades))
(meanAvgWLR <- mean(tStats$Avg.WinLoss.Ratio))
# Daily stats
dStats <- dailyStats(Portfolios = portfolio.st, use="Equity")
rownames(dStats) <- gsub(".DailyEndEq","", rownames(dStats))
print(data.frame(t(dStats)))
# Portfolio cash PL
portPL <- .blotter$portfolio.TVI_osATR$summary$Net.Trading.PL
# Cash Sharpe
(SharpeRatio.annualized(portPL, geometric=FALSE))
# Portfolio comparisons to SPY
instRets <- PortfReturns(account.st)
# Correlations
instCors <- cor(instRets)
diag(instRets) <- NA
corMeans <- rowMeans(instCors, na.rm=TRUE)
names(corMeans) <- gsub(".DailyEndEq", "", names(corMeans))
print(round(corMeans,3))
mean(corMeans)
