// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// computeKAMA
NumericVector computeKAMA(NumericVector alpha, NumericVector alphaComplement, NumericVector KAMA, NumericVector price);
RcppExport SEXP DSTrading_computeKAMA(SEXP alphaSEXP, SEXP alphaComplementSEXP, SEXP KAMASEXP, SEXP priceSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type alphaComplement(alphaComplementSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type KAMA(KAMASEXP );
        Rcpp::traits::input_parameter< NumericVector >::type price(priceSEXP );
        NumericVector __result = computeKAMA(alpha, alphaComplement, KAMA, price);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// computeFRAMA
NumericVector computeFRAMA(NumericVector alpha, NumericVector alphaComplement, NumericVector FRAMA, NumericVector price);
RcppExport SEXP DSTrading_computeFRAMA(SEXP alphaSEXP, SEXP alphaComplementSEXP, SEXP FRAMASEXP, SEXP priceSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type alphaComplement(alphaComplementSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type FRAMA(FRAMASEXP );
        Rcpp::traits::input_parameter< NumericVector >::type price(priceSEXP );
        NumericVector __result = computeFRAMA(alpha, alphaComplement, FRAMA, price);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// computeItrend
NumericVector computeItrend(NumericVector price, NumericVector iTrend, NumericVector alpha);
RcppExport SEXP DSTrading_computeItrend(SEXP priceSEXP, SEXP iTrendSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type price(priceSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type iTrend(iTrendSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP );
        NumericVector __result = computeItrend(price, iTrend, alpha);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// computeVIDA
NumericVector computeVIDA(NumericVector k, NumericVector price, NumericVector filt, NumericVector consts);
RcppExport SEXP DSTrading_computeVIDA(SEXP kSEXP, SEXP priceSEXP, SEXP filtSEXP, SEXP constsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type k(kSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type price(priceSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type filt(filtSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type consts(constsSEXP );
        NumericVector __result = computeVIDA(k, price, filt, consts);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
